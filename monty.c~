#include <stdio.h>
#include <stdlib.h>

#define STACK_SIZE 1000

/**
 * struct stack_s - doubly linked list representation of a stack (or queue)
 * @n: integer value stored in the node
 * @prev: points to the previous element of the stack (or queue)
 * @next: points to the next element of the stack (or queue)
 */
typedef struct stack_s
{
    int n;
    struct stack_s *prev;
    struct stack_s *next;
} stack_t;

stack_t *stack;

/**
 * push - pushes an element to the stack
 * @line_number: line number in the file
 * @value: integer value to push onto the stack
 */
void push(unsigned int line_number, int value)
{
    stack_t *new_node = malloc(sizeof(stack_t));

    if (!new_node)
    {
        dprintf(2, "Error: malloc failed\n");
        exit(EXIT_FAILURE);
    }

    new_node->n = value;
    new_node->prev = NULL;

    if (!stack)
        new_node->next = NULL;
    else
    {
        new_node->next = stack;
        stack->prev = new_node;
    }

    stack = new_node;
}

/**
 * pall - prints all the values on the stack
 * @line_number: line number in the file
 */
void pall(unsigned int line_number)
{
    stack_t *current = stack;

    (void)line_number;

    while (current)
    {
        printf("%d\n", current->n);
        current = current->next;
    }
}

/**
 * main - entry point for the Monty interpreter
 * @argc: number of command-line arguments
 * @argv: array of command-line arguments
 * Return: EXIT_SUCCESS on success, EXIT_FAILURE on failure
 */
int main(int argc, char *argv[])
{
    FILE *file;
    char *line = NULL;
    size_t len = 0;
    unsigned int line_number = 0;
    int value;

    if (argc != 2)
    {
        dprintf(2, "USAGE: monty file\n");
        exit(EXIT_FAILURE);
    }

    file = fopen(argv[1], "r");
    if (!file)
    {
        dprintf(2, "Error: Can't open file %s\n", argv[1]);
        exit(EXIT_FAILURE);
    }

    while (getline(&line, &len, file) != -1)
    {
        line_number++;
        if (line[0] == '\n' || line[0] == ' ')
            continue;

        if (sscanf(line, "push %d", &value) == 1)
            push(line_number, value);
        else if (strcmp(line, "pall\n") == 0)
            pall(line_number);
        else
        {
            dprintf(2, "L%u: unknown instruction %s", line_number, line);
            exit(EXIT_FAILURE);
        }
    }

    free(line);
    fclose(file);
    return EXIT_SUCCESS;
}
